<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="6" passed="4" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-07-27T18:40:25 KRAT" name="Suite1" finished-at="2023-07-27T18:41:05 KRAT" duration-ms="39384">
    <groups>
    </groups>
    <test started-at="2023-07-27T18:40:25 KRAT" name="Android" finished-at="2023-07-27T18:40:58 KRAT" duration-ms="32350">
      <class name="tests.LoginTests">
        <test-method is-config="true" signature="beforeSuite()[pri:0, instance:tests.LoginTests@49b0b76]" started-at="2023-07-27T18:40:21 KRAT" name="beforeSuite" finished-at="2023-07-27T18:40:25 KRAT" duration-ms="4586" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method is-config="true" signature="setUp(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTests@49b0b76]" started-at="2023-07-27T18:40:25 KRAT" name="setUp" finished-at="2023-07-27T18:40:36 KRAT" duration-ms="10484" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Android]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10000]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[11000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[iOSOnly]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[iOSOnly]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:tests.LoginTests@49b0b76]" started-at="2023-07-27T18:40:36 KRAT" name="beforeClass" finished-at="2023-07-27T18:40:36 KRAT" duration-ms="24" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@49b0b76]" started-at="2023-07-27T18:40:36 KRAT" name="beforeMethod" finished-at="2023-07-27T18:40:36 KRAT" duration-ms="73" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.invalidPassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="invalidPassword()[pri:0, instance:tests.LoginTests@49b0b76]" started-at="2023-07-27T18:40:36 KRAT" name="invalidPassword" finished-at="2023-07-27T18:40:42 KRAT" duration-ms="5676" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Username and password do not match any user in this service.bla] but found [Username and password do not match any user in this service.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Username and password do not match any user in this service.bla] but found [Username and password do not match any user in this service.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at tests.LoginTests.invalidPassword(LoginTests.java:80)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:481)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:58)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:832)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidPassword -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@49b0b76]" started-at="2023-07-27T18:40:43 KRAT" name="beforeMethod" finished-at="2023-07-27T18:40:43 KRAT" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.invalidUsername()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="invalidUsername()[pri:0, instance:tests.LoginTests@49b0b76]" started-at="2023-07-27T18:40:43 KRAT" name="invalidUsername" finished-at="2023-07-27T18:40:47 KRAT" duration-ms="3809" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidUsername -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@49b0b76]" started-at="2023-07-27T18:40:48 KRAT" name="beforeMethod" finished-at="2023-07-27T18:40:48 KRAT" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.successfulLogin() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="successfulLogin()[pri:0, instance:tests.LoginTests@49b0b76]" started-at="2023-07-27T18:40:48 KRAT" name="successfulLogin" finished-at="2023-07-27T18:40:55 KRAT" duration-ms="7243" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- successfulLogin -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:tests.LoginTests@49b0b76]" started-at="2023-07-27T18:40:57 KRAT" name="afterClass" finished-at="2023-07-27T18:40:57 KRAT" duration-ms="410" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@49b0b76]" started-at="2023-07-27T18:40:57 KRAT" name="tearDown" finished-at="2023-07-27T18:40:58 KRAT" duration-ms="266" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="afterSuite()[pri:0, instance:tests.LoginTests@49b0b76]" started-at="2023-07-27T18:41:05 KRAT" name="afterSuite" finished-at="2023-07-27T18:41:09 KRAT" duration-ms="4348" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- tests.LoginTests -->
    </test> <!-- Android -->
    <test started-at="2023-07-27T18:40:25 KRAT" name="iOS" finished-at="2023-07-27T18:41:05 KRAT" duration-ms="39384">
      <class name="tests.LoginTests">
        <test-method is-config="true" signature="setUp(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTests@161479c6]" started-at="2023-07-27T18:40:25 KRAT" name="setUp" finished-at="2023-07-27T18:40:33 KRAT" duration-ms="7322" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[iOS]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[androidOnly]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[androidOnly]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10001]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11001]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:tests.LoginTests@161479c6]" started-at="2023-07-27T18:40:33 KRAT" name="beforeClass" finished-at="2023-07-27T18:40:33 KRAT" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@161479c6]" started-at="2023-07-27T18:40:33 KRAT" name="beforeMethod" finished-at="2023-07-27T18:40:33 KRAT" duration-ms="276" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.invalidPassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="invalidPassword()[pri:0, instance:tests.LoginTests@161479c6]" started-at="2023-07-27T18:40:33 KRAT" name="invalidPassword" finished-at="2023-07-27T18:40:42 KRAT" duration-ms="8934" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Username and password do not match any user in this service.bla] but found [Username and password do not match any user in this service.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Username and password do not match any user in this service.bla] but found [Username and password do not match any user in this service.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at tests.LoginTests.invalidPassword(LoginTests.java:80)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:481)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:58)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:832)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidPassword -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@161479c6]" started-at="2023-07-27T18:40:43 KRAT" name="beforeMethod" finished-at="2023-07-27T18:40:43 KRAT" duration-ms="27" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.invalidUsername()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="invalidUsername()[pri:0, instance:tests.LoginTests@161479c6]" started-at="2023-07-27T18:40:43 KRAT" name="invalidUsername" finished-at="2023-07-27T18:40:51 KRAT" duration-ms="7711" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidUsername -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@161479c6]" started-at="2023-07-27T18:40:51 KRAT" name="beforeMethod" finished-at="2023-07-27T18:40:51 KRAT" duration-ms="32" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.successfulLogin() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="successfulLogin()[pri:0, instance:tests.LoginTests@161479c6]" started-at="2023-07-27T18:40:51 KRAT" name="successfulLogin" finished-at="2023-07-27T18:41:03 KRAT" duration-ms="11887" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- successfulLogin -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:tests.LoginTests@161479c6]" started-at="2023-07-27T18:41:04 KRAT" name="afterClass" finished-at="2023-07-27T18:41:05 KRAT" duration-ms="1174" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@161479c6]" started-at="2023-07-27T18:41:05 KRAT" name="tearDown" finished-at="2023-07-27T18:41:05 KRAT" duration-ms="24" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.LoginTests -->
    </test> <!-- iOS -->
  </suite> <!-- Suite1 -->
</testng-results>
